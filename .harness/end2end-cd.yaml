pipeline:
  identifier: EndtoEnd_Pipeline
  name: End to End - Enterprise
  allowStageExecutions: true
  projectIdentifier: Platform_Demo
  orgIdentifier": default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: WingsSoftware_Repo
        repoName: e2e-enterprise-demo
        build: <+input>
  stages:
    - stage:
        name: Build - Test - Push
        identifier: Build_Test_Push
        type: CI
        spec:
          cloneCodebase: true
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: platformdemok8s
              namespace: build
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - parallel:
                  - stepGroup:
                      name: SCA
                      identifier: SCA
                      steps:
                        - parallel:
                            - step:
                                type: Security
                                name: OWASP
                                identifier: OWASP
                                spec:
                                  privileged: true
                                  settings:
                                    policy_type: ingestionOnly
                                    scan_type: repository
                                    repository_project: <+codebase.repoUrl>
                                    repository_branch: main
                                    product_name: owasp
                                    product_config_name: default
                                    customer_artifacts_path: sto_tests/scan_tools/owasp/test_data/
                                    manual_upload_filename: "001"
                                  imagePullPolicy: Always
                                  resources:
                                    limits:
                                      memory: 2048Mi
                                failureStrategies:
                                  - onFailure:
                                      errors:
                                        - AllErrors
                                      action:
                                        type: MarkAsSuccess
                                when:
                                  stageStatus: Success
                                  condition: <+codebase.sourceBranch>=~ ".*-patch.*" || <+pipeline.variables.devonly> == "false"
                            - step:
                                type: Snyk
                                name: Snyk SCA
                                identifier: SnykSCA
                                spec:
                                  mode: ingestion
                                  config: default
                                  target:
                                    name: <+codebase.repoUrl>
                                    type: repository
                                    variant: active_cves
                                  advanced:
                                    log:
                                      level: info
                                  ingestion:
                                    file: sto_tests/scan_tools/snyk/test_data/002
                                failureStrategies:
                                  - onFailure:
                                      errors:
                                        - AllErrors
                                      action:
                                        type: Ignore
                      when:
                        stageStatus: Success
                      failureStrategies: []
                      spec: {}
                  - step:
                      type: RestoreCacheS3
                      name: Restore Cache
                      identifier: Restore_Cache_S3
                      spec:
                        connectorRef: AWSSalesDanF
                        region: eu-west-2
                        bucket: nikp-maven
                        key: payment-service-ci
                        archiveFormat: Tar
                        resources:
                          limits:
                            memory: 512Mi
                            cpu: "0.5"
              - step:
                  type: Run
                  name: Build Java App
                  identifier: Build_Java_App
                  spec:
                    connectorRef: account.Harness_Docker_Connector
                    image: dmontanez/devx-maven:3.8-jdk-8
                    shell: Sh
                    command: |-
                      cd payment-service
                      mvn -Dmaven.test.skip=true clean install -X
                    envVariables:
                      MAVEN_OPTS: "-Dmaven.repo.local=/harness/maven/repository"
                    resources:
                      limits:
                        memory: 4Gi
                        cpu: "2"
                  when:
                    stageStatus: Success
                  failureStrategies: []
              - parallel:
                  - step:
                      type: RunTests
                      name: Test Int and ErrorTracking
                      identifier: runTestsWithIntelligence
                      spec:
                        connectorRef: account.Harness_Docker_Connector
                        image: dmontanez/devx-maven:3.8-jdk-8
                        language: Java
                        buildTool: Maven
                        args: test
                        packages: com.nikp.
                        runOnlySelectedTests: true
                        enableTestSplitting: true
                        preCommand: |
                          cd payment-service
                          #ET-SETUP-BEGIN
                          PROJ_DIR=$PWD
                          cd /opt
                          arch=`uname -m`
                          if [ $arch = "x86_64" ]; then
                            if cat /etc/os-release | grep -iq alpine ; then
                              wget -qO- https://get.et.harness.io/releases/latest/alpine/harness-et-agent.tar.gz | tar -xz
                            else
                              wget -qO- https://get.et.harness.io/releases/latest/nix/harness-et-agent.tar.gz | tar -xz
                            fi
                          elif [ $arch = "aarch64" ]; then
                            wget -qO- https://get.et.harness.io/releases/latest/arm/harness-et-agent.tar.gz | tar -xz
                          fi
                          export ET_COLLECTOR_URL=https://app.harness.io/gratis/et-collector
                          export ET_APPLICATION_NAME=$HARNESS_PIPELINE_ID
                          export ET_ENV_ID=_INTERNAL_ET_CI
                          export ET_DEPLOYMENT_NAME=$HARNESS_BUILD_ID
                          export ET_ACCOUNT_ID=$HARNESS_ACCOUNT_ID
                          export ET_ORG_ID=$HARNESS_ORG_ID
                          export ET_PROJECT_ID=$HARNESS_PROJECT_ID
                          # export ET_SHUTDOWN_GRACETIME=30000
                          export JAVA_TOOL_OPTIONS="-agentpath:/opt/harness/lib/libETAgent.so"
                          # Uncomment the line below if using Java version 10 or above
                          # export JAVA_TOOL_OPTIONS="-Xshare:off -XX:-UseTypeSpeculation -XX:ReservedCodeCacheSize=512m -agentpath:/opt/harness/lib/libETAgent.so"
                          cd $PROJ_DIR
                          #ET-SETUP-END
                        reports:
                          type: JUnit
                          spec:
                            paths:
                              - "**/*.xml"
                        envVariables:
                          DRONE_COMMIT_SHA: any
                          DRONE_REMOTE_URL: any
                          DRONE_SOURCE_BRANCH: any
                          DRONE_TARGET_BRANCH: any
                          MAVEN_OPTS: "-Dmaven.repo.local=/harness/maven/repository"
                          CONTAINER_STEP: "3"
                        resources:
                          limits:
                            memory: 4Gi
                            cpu: "1"
                      when:
                        stageStatus: Success
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: MarkAsSuccess
                      strategy:
                        parallelism: 2
                  - step:
                      type: Run
                      name: GH - PR Comment
                      identifier: Update_PR_Ticket
                      spec:
                        connectorRef: danf_dockerhub
                        image: curlimages/curl:7.82.0
                        shell: Sh
                        command: |-
                          curl -s -H 'Authorization: token  <+secrets.getValue("danf_gh_pat")>' \
                           -X POST -d '{"body": "SCA scans executed. Build is starting. PR:<+trigger.prNumber>. Harness_Execution_ID:<+pipeline.executionId>."}' \
                           'https://api.github.com/repos/wings-software/e2e-enterprise-demo/issues/<+trigger.prNumber>/comments'
                      when:
                        stageStatus: Success
                      failureStrategies: []
              - parallel:
                  - stepGroup:
                      name: SAST and Code Coverage
                      identifier: SAST
                      steps:
                        - parallel:
                            - step:
                                type: Security
                                name: Snyk SAST
                                identifier: Snyk
                                spec:
                                  privileged: true
                                  settings:
                                    policy_type: manualUpload
                                    scan_type: repository
                                    repository_branch: main
                                    product_name: snyk
                                    product_project_name: e2e-service
                                    product_project_key: e2e-service
                                    product_config_name: default
                                    product_lookup_type: byKey
                                    repository_project: e2e-service
                                    customer_artifacts_path: sto_tests/scan_tools/snyk/test_data
                                    manual_upload_filename: "001"
                                  imagePullPolicy: Always
                                when:
                                  stageStatus: Success
                                  condition: <+codebase.sourceBranch>=~ ".*-patch.*" || <+pipeline.variables.devonly> == "false"
                                failureStrategies:
                                  - onFailure:
                                      errors:
                                        - AllErrors
                                      action:
                                        type: Ignore
                            - step:
                                type: Sonarqube
                                name: SonarQube SAST
                                identifier: SonarQube_SAST
                                spec:
                                  mode: ingestion
                                  config: default
                                  target:
                                    name: e2e-service
                                    type: repository
                                    variant: main
                                  advanced:
                                    log:
                                      level: info
                                  ingestion:
                                    file: sto_tests/scan_tools/sonarqube/test_data/001
                                failureStrategies:
                                  - onFailure:
                                      errors:
                                        - AllErrors
                                      action:
                                        type: Ignore
                      when:
                        stageStatus: Success
                      failureStrategies: []
                      spec: {}
                  - step:
                      type: SaveCacheS3
                      name: Save Cache
                      identifier: SaveCacheS3
                      spec:
                        connectorRef: AWSSalesDanF
                        region: us-east-1
                        bucket: danf-bucket
                        key: e2e-cache
                        sourcePaths:
                          - ./maven/repository
                        archiveFormat: Tar
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: Ignore
              - stepGroup:
                  name: Push Artifacts
                  identifier: Push_Artifacts
                  steps:
                    - parallel:
                        - step:
                            type: BuildAndPushDockerRegistry
                            name: DockerHub - Build and Push
                            identifier: Build_and_push_image_to_DockerHub
                            spec:
                              connectorRef: danf_dockerhub
                              repo: dmontanez/e2e-service
                              tags:
                                - 1.<+pipeline.sequenceId>
                              dockerfile: /harness/payment-service/Dockerfile
                              labels:
                                Harness_Execution: https://app.harness.io/ng/#/account/6_vVHzo9Qeu9fXvj-AcbCQ/cd/<+org.name>/default/projects/<+project.name>/pipelines/CD_Pipeline/executions/<+pipeline.executionId>/pipeline
                              optimize: true
                              remoteCacheRepo: dmontanez/jhttp_cache_repo
                              resources:
                                limits:
                                  memory: 2Gi
                                  cpu: "1"
                        - step:
                            type: BuildAndPushDockerRegistry
                            name: Artifactory - Build and Push
                            identifier: Artifactory_Build_and_Push
                            spec:
                              connectorRef: danf_artifactory
                              repo: danf425.jfrog.io/default-docker-virtual/e2e-service
                              tags:
                                - 1.<+pipeline.sequenceId>
                              dockerfile: /harness/payment-service/Dockerfile
                              labels:
                                Harness_Execution: https://app.harness.io/ng/#/account/6_vVHzo9Qeu9fXvj-AcbCQ/cd/<+org.name>/default/projects/<+project.name>/pipelines/CD_Pipeline/executions/<+pipeline.executionId>/pipeline
                            failureStrategies:
                              - onFailure:
                                  errors:
                                    - AllErrors
                                  action:
                                    type: MarkAsSuccess
                  when:
                    stageStatus: Success
                  failureStrategies: []
                  spec: {}
              - stepGroup:
                  name: Image Scan
                  identifier: Image_Scan
                  steps:
                    - parallel:
                        - step:
                            type: Security
                            name: JFrog Xray
                            identifier: JFrog_Xray
                            spec:
                              privileged: true
                              settings:
                                policy_type: ingestionOnly
                                scan_type: containerImage
                                product_name: xray
                                product_config_name: default
                                customer_artifacts_path: sto_tests/scan_tools/xray/test_data
                                manual_upload_filename: "001"
                                container_project: e2e-service
                                container_tag: "1.18"
                            when:
                              stageStatus: Success
                              condition: <+codebase.sourceBranch>=~ ".*-patch.*" || <+pipeline.variables.devonly> == "false"
                            failureStrategies: []
                        - step:
                            type: AquaTrivy
                            name: Aqua Trivy
                            identifier: Aqua_Trivy
                            spec:
                              mode: ingestion
                              config: default
                              target:
                                name: e2e-service
                                type: container
                                variant: local
                              advanced:
                                log:
                                  level: info
                              privileged: false
                              ingestion:
                                file: sto_tests/scan_tools/aqua_trivy/test_data/005
                            failureStrategies:
                              - onFailure:
                                  errors:
                                    - AllErrors
                                  action:
                                    type: Ignore
                  when:
                    stageStatus: Success
                  failureStrategies: []
                  spec: {}
              - stepGroup:
                  name: GitHub Status Checks
                  identifier: GitHub_Status_Checks
                  steps:
                    - parallel:
                        - step:
                            type: Run
                            name: PR Status - Xray and Aqua
                            identifier: PR_Status_Aqua
                            spec:
                              connectorRef: account.Harness_Docker_Connector
                              image: curlimages/curl:7.82.0
                              shell: Sh
                              command: |-
                                curl -i -u danf425:<+secrets.getValue("danf_gh_pat")> \
                                  -X POST \
                                  -H "Accept: application/vnd.github.v3+json" \
                                  https://api.github.com/repos/wings-software/e2e-enterprise-demo/statuses/<+codebase.commitSha> \
                                  -d '{"state":"success","target_url":"https://app.harness.io/ng/#/account/6_vVHzo9Qeu9fXvj-AcbCQ/ci/orgs/default/projects/Platform_Demo/pipelines/EndtoEnd_Pipeline_SVC_Redesign/executions/<+pipeline.executionId>/security","description":"Aqua scan passed","context":"harness-ci/aqua"}'

                                curl -i -u danf425:<+secrets.getValue("danf_gh_pat")> \
                                  -X POST \
                                  -H "Accept: application/vnd.github.v3+json" \
                                  https://api.github.com/repos/wings-software/e2e-enterprise-demo/statuses/<+codebase.commitSha> \
                                  -d '{"state":"success","target_url":"https://app.harness.io/ng/#/account/6_vVHzo9Qeu9fXvj-AcbCQ/ci/orgs/default/projects/Platform_Demo/pipelines/EndtoEnd_Pipeline_SVC_Redesign/executions/<+pipeline.executionId>/security","description":"JFrog Xray scan passed","context":"harness-ci/xray"}'
                            when:
                              stageStatus: Success
                              condition: <+codebase.sourceBranch>=~ ".*-patch.*" || <+pipeline.variables.devonly> == "false"
                            failureStrategies: []
                        - step:
                            type: Run
                            name: PR Status - Sonar and Snyk
                            identifier: Update_PR_SonarQube_Status
                            spec:
                              connectorRef: account.Harness_Docker_Connector
                              image: curlimages/curl:7.82.0
                              shell: Sh
                              command: |-
                                curl -i -u danf425:<+secrets.getValue("danf_gh_pat")> \
                                  -X POST \
                                  -H "Accept: application/vnd.github.v3+json" \
                                  https://api.github.com/repos/wings-software/e2e-enterprise-demo/statuses/<+codebase.commitSha> \
                                  -d '{"state":"success","target_url":"https://app.harness.io/ng/#/account/6_vVHzo9Qeu9fXvj-AcbCQ/ci/orgs/default/projects/Platform_Demo/pipelines/EndtoEnd_Pipeline_SVC_Redesign/executions/<+pipeline.executionId>/security","description":"sonarqube scan passed","context":"harness-ci/sonarqube"}'

                                curl -i -u danf425:<+secrets.getValue("danf_gh_pat")> \
                                  -X POST \
                                  -H "Accept: application/vnd.github.v3+json" \
                                  https://api.github.com/repos/wings-software/e2e-enterprise-demo/statuses/<+codebase.commitSha> \
                                  -d '{"state":"success","target_url":"https://app.harness.io/ng/#/account/6_vVHzo9Qeu9fXvj-AcbCQ/ci/orgs/default/projects/Platform_Demo/pipelines/EndtoEnd_Pipeline_SVC_Redesign/executions/<+pipeline.executionId>/security","description":"snyk scan passed","context":"harness-ci/snyk"}'
                            when:
                              stageStatus: Success
                              condition: <+codebase.sourceBranch>=~ ".*-patch.*" || <+pipeline.variables.devonly> == "false"
                            failureStrategies: []
                        - step:
                            type: Run
                            name: GitOps - Create Release
                            identifier: Create_Release_GitOps
                            spec:
                              connectorRef: account.Harness_Docker_Connector
                              image: curlimages/curl:7.82.0
                              shell: Sh
                              command: |-
                                curl \
                                  -X POST \
                                  -H "Accept: application/vnd.github+json" \
                                  -H "Authorization: Bearer <+secrets.getValue("danf_gh_pat")>" \
                                  https://api.github.com/repos/wings-software/e2e-enterprise-demo/releases \
                                  -d '{"tag_name":"k8s-gitops-v<+pipeline.stages.Build_Test_Push.spec.execution.steps.Push_Artifacts.steps.Build_and_push_image_to_DockerHub.artifact_Push_Artifacts_Build_and_push_image_to_DockerHub.stepArtifacts.publishedImageArtifacts[0].tag>","target_commitish":"main","name":"k8s-gitops-v<+pipeline.stages.Build_Test_Push.spec.execution.steps.Push_Artifacts.steps.Build_and_push_image_to_DockerHub.artifact_Push_Artifacts_Build_and_push_image_to_DockerHub.stepArtifacts.publishedImageArtifacts[0].tag>","body":"Description of the release","draft":false,"prerelease":false,"generate_release_notes":false}'
                        - step:
                            type: Run
                            name: Build Provenance
                            identifier: buildProvenance
                            spec:
                              connectorRef: account.Harness_Docker_Connector
                              image: curlimages/curl:latest
                              shell: Sh
                              command: |-
                                echo "{
                                  "_type": "https://in-toto.io/Statement/v0.1",
                                  "subject": [
                                    {
                                      "name": "jhttp",
                                      "digest": {
                                        "sha256": "f8161d035cdf328c7bb124fce192cb90b603f34ca78d73e33b736b4f6bddf993"
                                      }
                                    }
                                  ],
                                  "predicateType": "https://slsa.dev/provenance/v0.1",
                                  "predicate": {
                                    "builder": {
                                      "id": "<+pipeline.name>"
                                    },
                                    "metadata": {
                                      "buildInvocationId": "https:/#/app.harness.io/ng/account/6_vVHzo9Qeu9fXvj-AcbCQ/ci/orgs/default/projects/Demo_Sandbox/pipelines/jhttpND/executions/<+pipeline.executionId>",
                                      "completeness": {
                                        "arguments": true,
                                        "environment": false,
                                        "materials": false
                                      },
                                      "reproducible": false,
                                      "buildFinishedOn": "<+pipeline.startTs>"
                                    },
                                    "pipeline": {
                                      "type": "https://app.harness.io/ng/#/account/6_vVHzo9Qeu9fXvj-AcbCQ/ci/orgs/default/projects/Demo_Sandbox/pipelines/jhttpND/pipeline-studio/<+pipeline.sequenceId>",
                                      "definedInMaterial": 0,
                                      "entryPoint": "Create a sample provenance",
                                      "arguments": null,
                                      "environment": <+project.name>
                                    },
                                    "materials": [
                                      {
                                        "uri": "git+<+codebase.repoUrl>",
                                        "digest": {
                                          "sha1": "<+codebase.commitSha>"
                                        }
                                      }
                                    ]
                                  }
                                }" >> provenance.yaml
                                cat provenance.yaml
                              privileged: false
                            when:
                              stageStatus: Success
                              condition: <+codebase.sourceBranch>=~ ".*-patch.*" || <+pipeline.variables.devonly> == "false"
                            failureStrategies: []
                  when:
                    stageStatus: Success
                  failureStrategies: []
                  spec: {}
          serviceDependencies:
            - identifier: dind
              name: dind
              type: Service
              spec:
                connectorRef: harnessImage
                image: docker:dind
                privileged: true
                resources:
                  limits:
                    memory: 2048Mi
                    cpu: 1000m
          sharedPaths:
            - /var/run
            - /root/.m2
            - /opt/
    - parallel:
        - stage:
            name: Deploy to Dev
            identifier: Deploy_to_Dev
            description: ""
            type: Deployment
            spec:
              deploymentType: Kubernetes
              environment:
                environmentRef: dev
                deployToAll: false
                infrastructureDefinitions:
                  - identifier: boutiquedev
              execution:
                steps:
                  - stepGroup:
                      name: Terraform Plan and Apply
                      identifier: Terraform_Plan_and_Apply
                      steps:
                        - parallel:
                            - step:
                                type: TerraformPlan
                                name: TF Plan AWS
                                identifier: TF_Plan_S3
                                spec:
                                  configuration:
                                    command: Apply
                                    configFiles:
                                      store:
                                        type: Github
                                        spec:
                                          gitFetchType: Branch
                                          connectorRef: danf_jhttp_repo
                                          repoName: terraform_scripts
                                          branch: main
                                          folderPath: terraform/aws
                                    secretManagerRef: harnessSecretManager
                                    varFiles:
                                      - varFile:
                                          identifier: terraform.tfvars
                                          spec:
                                            content: |-
                                              aws_region = "us-east-1"
                                              access_key = "<+secrets.getValue("danfawsaccesskeyid")>"
                                              secret_key = "<+secrets.getValue("danfawssecretaccesskey")>"
                                              bucket_name = "e2e-demo-<+pipeline.sequenceId>"
                                          type: Inline
                                  provisionerIdentifier: e2eaws
                                  delegateSelectors:
                                    - platform-delegate-with-tf
                                timeout: 10m
                                failureStrategies: []
                            - step:
                                type: TerraformPlan
                                name: TF Plan Az
                                identifier: TF_Plan_Blob
                                spec:
                                  configuration:
                                    command: Apply
                                    configFiles:
                                      store:
                                        type: Github
                                        spec:
                                          gitFetchType: Branch
                                          connectorRef: danf_jhttp_repo
                                          repoName: terraform_scripts
                                          branch: main
                                          folderPath: terraform/azure
                                    secretManagerRef: harnessSecretManager
                                    varFiles:
                                      - varFile:
                                          identifier: terraform.tfvars
                                          spec:
                                            content: |-
                                              tenant_id = "<+secrets.getValue("danaztenantid")>"
                                              subscription_id = "<+secrets.getValue("danazsubscriptionid")>"
                                              client_id = "<+secrets.getValue("danazclientid")>"
                                              client_secret = "<+secrets.getValue("danazclientsecret")>"
                                          type: Inline
                                  provisionerIdentifier: e2eaz
                                  delegateSelectors:
                                    - platform-delegate-with-tf
                                timeout: 10m
                                failureStrategies: []
                        - parallel:
                            - step:
                                type: TerraformApply
                                name: TF Apply AWS
                                identifier: TF_Apply_S3
                                spec:
                                  provisionerIdentifier: e2eaws
                                  configuration:
                                    type: InheritFromPlan
                                  delegateSelectors:
                                    - platform-delegate-with-tf
                                timeout: 10m
                                when:
                                  stageStatus: Success
                                failureStrategies: []
                            - step:
                                type: TerraformApply
                                name: TF Apply Az
                                identifier: TF_Apply_AzBlob
                                spec:
                                  provisionerIdentifier: e2eaz
                                  configuration:
                                    type: InheritFromPlan
                                  delegateSelectors:
                                    - platform-delegate-with-tf
                                timeout: 10m
                                failureStrategies: []
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: MarkAsSuccess
                      spec: {}
                      when:
                        stageStatus: Success
                        condition: <+codebase.sourceBranch>=~ ".*-patch.*" || <+pipeline.variables.devonly> == "false"
                      delegateSelectors:
                        - platform-delegate-with-tf
                  - parallel:
                      - step:
                          type: JiraCreate
                          name: Jira - Create Ticket
                          identifier: Open_Jira_Ticket
                          spec:
                            connectorRef: account.Harness_JIRA
                            projectKey: HD
                            issueType: Story
                            fields:
                              - name: Description
                                value: "Promote <+service.name> to production \\\\ Pipeline Name: <+pipeline.name> \\\\ Artifact: <+artifact.image> \\\\ Deployment URL: https://app.harness.io/ng/#/account/6_vVHzo9Qeu9fXvj-AcbCQ/cd/<+org.name>/default/projects/<+project.name>/pipelines/CD_Pipeline/executions/<+pipeline.executionId>/pipeline \\\\ Harness executionId: <+pipeline.executionId> \\\\ Harness sequenceId: <+pipeline.sequenceId> \\\\  PR requested by GH_User: <+pipeline.variables.ghusername>"
                              - name: Summary
                                value: Ticket to Track deployment
                          timeout: 1d
                          when:
                            stageStatus: Success
                            condition: <+codebase.sourceBranch>=~ ".*-patch.*" || <+pipeline.variables.devonly> == "false"
                          failureStrategies: []
                      - step:
                          type: ServiceNowCreate
                          name: ServiceNow - Create Ticket
                          identifier: ServiceNow_Create_Ticket
                          spec:
                            useServiceNowTemplate: false
                            connectorRef: account.ServiceNow
                            ticketType: CHANGE_REQUEST
                            fields:
                              - name: description
                                value: "Promote <+service.name> to production \\\\ Pipeline Name: <+pipeline.name> \\\\ Service Name: <+pipeline.variables.serviceName> \\\\ Deployment URL: https://app.harness.io/ng/#/account/6_vVHzo9Qeu9fXvj-AcbCQ/cd/<+org.name>/default/projects/<+project.name>/pipelines/CD_Pipeline/executions/<+pipeline.executionId>/pipeline \\\\ Harness executionId: <+pipeline.executionId> \\\\ Harness sequenceId: <+pipeline.sequenceId> \\\\  PR requested by GH_User: <+pipeline.variables.ghusername>"
                              - name: short_description
                                value: Begin promotion of <+service.name> to production
                          timeout: 1d
                          when:
                            stageStatus: Success
                            condition: <+codebase.sourceBranch>=~ ".*-patch.*" || <+pipeline.variables.devonly> == "false"
                          failureStrategies:
                            - onFailure:
                                errors:
                                  - AllErrors
                                action:
                                  type: Ignore
                  - step:
                      type: ShellScript
                      name: Check  Provenance
                      identifier: checkProvenance
                      spec:
                        shell: Bash
                        onDelegate: true
                        source:
                          type: Inline
                          spec:
                            script: echo "checking shas...."
                        environmentVariables: []
                        outputVariables: []
                      timeout: 10m
                      when:
                        stageStatus: Success
                        condition: <+codebase.sourceBranch>=~ ".*-patch.*" || <+pipeline.variables.devonly> == "false"
                  - step:
                      name: Rollout Deployment
                      identifier: rolloutDeployment
                      type: K8sRollingDeploy
                      timeout: 10m
                      spec:
                        skipDryRun: false
                      when:
                        stageStatus: Success
                      failureStrategies: []
                  - parallel:
                      - step:
                          type: JiraUpdate
                          name: Update Jira
                          identifier: Update_JIRA
                          spec:
                            connectorRef: account.Harness_JIRA
                            issueKey: <+pipeline.stages.Deploy_to_Dev.spec.execution.steps.Open_Jira_Ticket.issue.key>
                            fields:
                              - name: Comment
                                value: <+service.name> deployed via <+pipeline.stages.Deploy_to_Dev.spec.execution.steps.rolloutDeployment.type>
                          timeout: 1d
                          when:
                            stageStatus: Success
                            condition: <+codebase.sourceBranch>=~ ".*-patch.*" || <+pipeline.variables.devonly> == "false"
                          failureStrategies: []
                      - step:
                          type: ServiceNowUpdate
                          name: ServiceNow - Update Ticket
                          identifier: ServiceNow_Update_Ticket
                          spec:
                            useServiceNowTemplate: false
                            connectorRef: account.ServiceNow
                            ticketType: CHANGE_REQUEST
                            ticketNumber: <+execution.steps.ServiceNow_Create_Ticket.ticket.ticketNumber>
                            fields:
                              - name: description
                                value: "Promote <+service.name> to production \\\\ Pipeline Name: <+pipeline.name> \\\\ Service Name: <+pipeline.variables.serviceName> \\\\ Deployment URL: https://app.harness.io/ng/#/account/6_vVHzo9Qeu9fXvj-AcbCQ/cd/<+org.name>/default/projects/<+project.name>/pipelines/CD_Pipeline/executions/<+pipeline.executionId>/pipeline \\\\ Harness executionId: <+pipeline.executionId> \\\\ Harness sequenceId: <+pipeline.sequenceId> \\\\  PR requested by GH_User: <+pipeline.variables.ghusername>"
                              - name: short_description
                                value: Begin promotion of <+service.name> to production \\ Dev Deployment was successful (/)
                          timeout: 1d
                          when:
                            stageStatus: Success
                            condition: <+codebase.sourceBranch>=~ ".*-patch.*" || <+pipeline.variables.devonly> == "false"
                          failureStrategies:
                            - onFailure:
                                errors:
                                  - AllErrors
                                action:
                                  type: Ignore
                      - step:
                          type: ShellScript
                          name: Access to Deployment
                          identifier: Access_to_Deployment
                          spec:
                            shell: Bash
                            onDelegate: true
                            source:
                              type: Inline
                              spec:
                                script: |
                                  frontend=$(kubectl get service frontend-external -n boutique | awk '{print $4}' | xargs | awk '{print $2}')
                                  grafana=$(kubectl get service grafana -n boutique | awk '{print $4}' | xargs | awk '{print $2}')
                                  prom=$(kubectl get service prometheus-k8s -n boutique | awk '{print $4}' | xargs | awk '{print $2}')
                                  frontend="http://"$frontend
                                  grafana="http://"$grafana":3000"
                                  prom="http://"$prom":9090"


                                  echo "Boutique URL:" $frontend
                                  echo "Grafana URL: "$grafana
                                  echo "Prometheus URL: "$prom
                            environmentVariables: []
                            outputVariables:
                              - name: boutique_dev_url
                                type: String
                                value: frontend
                              - name: prometheus_url
                                type: String
                                value: grafana
                              - name: grafana_url
                                type: String
                                value: prom
                          timeout: 10m
                          failureStrategies:
                            - onFailure:
                                errors:
                                  - AllErrors
                                action:
                                  type: MarkAsSuccess
                  - step:
                      type: K8sApply
                      name: CCM - AutoStopping Rule
                      identifier: CCM_AutoStopping_Rule
                      spec:
                        filePaths:
                          - k8s_manifest/autostoppingrule.yaml
                        skipDryRun: false
                        skipSteadyStateCheck: false
                        overrides: []
                        skipRendering: false
                      timeout: 10m
                      when:
                        stageStatus: Failure
                      failureStrategies: []
                rollbackSteps:
                  - step:
                      name: Rollback Rollout Deployment
                      identifier: rollbackRolloutDeployment
                      type: K8sRollingRollback
                      timeout: 10m
                      spec: {}
              service:
                serviceRef: Boutique_Frontend
                serviceInputs:
                  serviceDefinition:
                    type: Kubernetes
                    spec:
                      artifacts:
                        primary:
                          primaryArtifactRef: <+input>
                          sources: <+input>
            tags: {}
            failureStrategies:
              - onFailure:
                  errors:
                    - AllErrors
                  action:
                    type: StageRollback
        - stage:
            name: GitOps - Dev
            identifier: Dev_GitOps
            description: ""
            type: Deployment
            spec:
              deploymentType: Kubernetes
              gitOpsEnabled: true
              execution:
                steps:
                  - step:
                      type: GitOpsUpdateReleaseRepo
                      name: Update ReleaseRepo
                      identifier: Update_ReleaseRepo
                      spec:
                        variables: []
                      timeout: 10m
                  - step:
                      type: Verify
                      name: Continuous Verification
                      identifier: cv_demo
                      spec:
                        type: Rolling
                        monitoredService:
                          type: Default
                          spec: {}
                        spec:
                          sensitivity: LOW
                          duration: 5m
                          deploymentTag: <+serviceConfig.artifacts.primary.tag>
                      timeout: 2h
                      failureStrategies:
                        - onFailure:
                            errors:
                              - Verification
                            action:
                              type: ManualIntervention
                              spec:
                                timeout: 2h
                                onTimeout:
                                  action:
                                    type: StageRollback
                        - onFailure:
                            errors:
                              - Unknown
                            action:
                              type: ManualIntervention
                              spec:
                                timeout: 2h
                                onTimeout:
                                  action:
                                    type: Ignore
                  - step:
                      type: ServiceNowApproval
                      name: ServiceNow Approval
                      identifier: ServiceNow_Approval
                      spec:
                        connectorRef: account.ServiceNow
                        ticketNumber: xxxxxx
                        ticketType: INCIDENT
                        approvalCriteria:
                          type: KeyValues
                          spec:
                            matchAnyCondition: true
                            conditions:
                              - key: state
                                operator: equals
                                value: Approved
                        rejectionCriteria:
                          type: KeyValues
                          spec:
                            matchAnyCondition: true
                            conditions: []
                      timeout: 1d
                      when:
                        stageStatus: Success
                        condition: <+pipeline.variables.devonly> == "cvfailed"
                      failureStrategies: []
                  - step:
                      type: MergePR
                      name: Merge PR
                      identifier: mergePR
                      spec:
                        deleteSourceBranch: true
                      timeout: 10m
                rollbackSteps: []
              service:
                serviceRef: gitops_service
              environment:
                environmentRef: devgitops
                deployToAll: true
            tags: {}
            failureStrategies:
              - onFailure:
                  errors:
                    - AllErrors
                  action:
                    type: Ignore
            when:
              pipelineStatus: Success
            variables:
              - name: release_tag
                type: String
                description: ""
                value: <+pipeline.stages.Build_Test_Push.spec.execution.steps.Push_Artifacts.steps.Build_and_push_image_to_DockerHub.artifact_Push_Artifacts_Build_and_push_image_to_DockerHub.stepArtifacts.publishedImageArtifacts[0].tag>
            gitOpsEnabled: true
            delegateSelectors:
              - platform-delegate-with-tf
    - parallel:
        - stage:
            name: Deploy to QA
            identifier: Deploy_to_QA
            description: ""
            type: Deployment
            spec:
              deploymentType: Kubernetes
              service:
                serviceRef: Boutique_Frontend
                serviceInputs:
                  serviceDefinition:
                    type: Kubernetes
                    spec:
                      artifacts:
                        primary:
                          primaryArtifactRef: boutiquefrontend
              environment:
                environmentRef: qa
                deployToAll: false
                infrastructureDefinitions:
                  - identifier: boutiqueqa
              execution:
                steps:
                  - step:
                      type: JiraUpdate
                      name: Update Jira
                      identifier: Update_JIRA
                      spec:
                        connectorRef: account.Harness_JIRA
                        issueKey: <+pipeline.stages.Deploy_to_Dev.spec.execution.steps.Open_Jira_Ticket.issue.key>
                        fields:
                          - name: Comment
                            value: "\"Deploy to QA\" started"
                      timeout: 1d
                  - stepGroup:
                      name: Blue-Green Deployment
                      identifier: BlueGreen_Deployment
                      steps:
                        - step:
                            name: Stage Deployment
                            identifier: stageDeployment
                            type: K8sBlueGreenDeploy
                            timeout: 10m
                            spec:
                              skipDryRun: false
                              pruningEnabled: false
                        - parallel:
                            - step:
                                type: ShellScript
                                name: Regression Tests
                                identifier: Regression_Tests
                                spec:
                                  shell: Bash
                                  onDelegate: true
                                  source:
                                    type: Inline
                                    spec:
                                      script: echo "Regression Tests"
                                  environmentVariables: []
                                  outputVariables: []
                                  executionTarget: {}
                                timeout: 10m
                            - step:
                                type: ShellScript
                                name: JMeter
                                identifier: JMeter
                                spec:
                                  shell: Bash
                                  onDelegate: true
                                  source:
                                    type: Inline
                                    spec:
                                      script: echo "JMeter"
                                  environmentVariables: []
                                  outputVariables: []
                                  executionTarget: {}
                                timeout: 10m
                            - step:
                                type: ShellScript
                                name: Selenium
                                identifier: Selenium
                                spec:
                                  shell: Bash
                                  onDelegate: true
                                  source:
                                    type: Inline
                                    spec:
                                      script: echo "Selenium"
                                  environmentVariables: []
                                  outputVariables: []
                                  executionTarget: {}
                                timeout: 10m
                        - step:
                            name: Swap primary with stage service
                            identifier: bgSwapServices
                            type: K8sBGSwapServices
                            timeout: 10m
                            spec:
                              skipDryRun: false
                  - parallel:
                      - step:
                          type: Chaos
                          name: Chaos - CartService Delete
                          identifier: Cart_Delete
                          spec:
                            experimentRef: badf73fd-0de9-4c5a-b5bf-9d2798be87a2
                            expectedResilienceScore: 10
                          failureStrategies:
                            - onFailure:
                                errors:
                                  - AllErrors
                                action:
                                  type: MarkAsSuccess
                          when:
                            stageStatus: Success
                      - step:
                          type: Verify
                          name: Chaos Verification
                          identifier: Chaos_Verification
                          spec:
                            type: Rolling
                            monitoredService:
                              type: Default
                              spec: {}
                            spec:
                              sensitivity: HIGH
                              duration: 5m
                              deploymentTag: <+serviceConfig.artifacts.primary.tag>
                            isMultiServicesOrEnvs: false
                          timeout: 2h
                          failureStrategies:
                            - onFailure:
                                errors:
                                  - AllErrors
                                action:
                                  type: Ignore
                                  spec:
                                    timeout: 2h
                                    onTimeout:
                                      action:
                                        type: StageRollback
                            - onFailure:
                                errors:
                                  - Unknown
                                action:
                                  type: ManualIntervention
                                  spec:
                                    timeout: 2h
                                    onTimeout:
                                      action:
                                        type: Ignore
                          when:
                            stageStatus: Success
                      - step:
                          type: ShellScript
                          name: Access to Deployment
                          identifier: Access_to_Deployment
                          spec:
                            shell: Bash
                            onDelegate: true
                            source:
                              type: Inline
                              spec:
                                script: |
                                  frontend=$(kubectl get service frontend-external -n boutique-qa | awk '{print $4}' | xargs | awk '{print $2}')
                                  grafana=$(kubectl get service grafana -n boutique-qa | awk '{print $4}' | xargs | awk '{print $2}')
                                  prom=$(kubectl get service prometheus-k8s -n boutique-qa | awk '{print $4}' | xargs | awk '{print $2}')
                                  frontend="http://"$frontend
                                  grafana="http://"$grafana":3000"
                                  prom="http://"$prom":9090"


                                  echo "Boutique URL:" $frontend
                                  echo "Grafana URL: "$grafana
                                  echo "Prometheus URL: "$prom
                            environmentVariables: []
                            outputVariables:
                              - name: boutique_qa_url
                                type: String
                                value: frontend
                              - name: prometheus_url
                                type: String
                                value: prom
                              - name: grafana_url
                                type: String
                                value: grafana
                          timeout: 10m
                          failureStrategies:
                            - onFailure:
                                errors:
                                  - AllErrors
                                action:
                                  type: MarkAsSuccess
                  - parallel:
                      - step:
                          type: K8sApply
                          name: CCM AutoStopping Rule
                          identifier: CCM_AutoStopping_Rule
                          spec:
                            filePaths:
                              - k8s_manifest/autostoppingrule.yaml
                            skipDryRun: false
                            skipSteadyStateCheck: false
                            overrides: []
                          timeout: 10m
                          when:
                            stageStatus: Failure
                          failureStrategies: []
                      - step:
                          type: JiraUpdate
                          name: Update Jira
                          identifier: Update_Jira
                          spec:
                            connectorRef: account.Harness_JIRA
                            issueKey: <+pipeline.stages.Deploy_to_Dev.spec.execution.steps.Open_Jira_Ticket.issue.key>
                            fields:
                              - name: Comment
                                value: QA Tests Successfully Passed
                          timeout: 1d
                rollbackSteps:
                  - step:
                      type: K8sBGSwapServices
                      name: Swap primary with stage service
                      identifier: rollbackBgSwapServices
                      timeout: 10m
                      spec:
                        skipDryRun: false
            tags: {}
            failureStrategies:
              - onFailure:
                  errors:
                    - AllErrors
                  action:
                    type: StageRollback
            when:
              pipelineStatus: Success
              condition: <+codebase.sourceBranch>=~ ".*-patch.*" || <+pipeline.variables.devonly> == "false"
        - stage:
            name: DAST Scans
            identifier: DAST_Scans
            template:
              templateRef: Pre_Deployment_Security_Scans
              versionLabel: "1.0"
    - stage:
        name: Approval
        identifier: Approval
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  name: Jira Approval
                  identifier: jiraApproval
                  type: JiraApproval
                  timeout: 4h
                  spec:
                    approvalCriteria:
                      type: KeyValues
                      spec:
                        matchAnyCondition: true
                        conditions:
                          - key: Status
                            operator: equals
                            value: Approved
                    rejectionCriteria:
                      type: KeyValues
                      spec:
                        matchAnyCondition: true
                        conditions: []
                    connectorRef: account.Harness_JIRA
                    projectKey: HD
                    issueType: Story
                    issueKey: <+pipeline.stages.Deploy_to_Dev.spec.execution.steps.Open_Jira_Ticket.issue.key>
                  failureStrategies:
                    - onFailure:
                        errors:
                          - Timeout
                        action:
                          type: Ignore
              - step:
                  type: ServiceNowApproval
                  name: ServiceNow Approval
                  identifier: ServiceNow_Approval
                  spec:
                    connectorRef: account.ServiceNow
                    ticketType: CHANGE_REQUEST
                    approvalCriteria:
                      type: KeyValues
                      spec:
                        matchAnyCondition: true
                        conditions:
                          - key: state
                            operator: equals
                            value: Approve
                    rejectionCriteria:
                      type: KeyValues
                      spec:
                        matchAnyCondition: true
                        conditions: []
                    ticketNumber: <+pipeline.stages.Deploy_Dev.spec.execution.steps.Open_Jira_Ticket.issue.key>
                    changeWindow:
                      startField: work_start
                      endField: end_date
                  timeout: 1d
                  when:
                    stageStatus: Failure
                    condition: <+pipeline.stages.Approval.spec.execution.steps.jiraApproval.spec.approvalCriteria.criteriaSpec.conditions[0].value>=="rejected"
                  failureStrategies: []
          serviceDependencies: []
        tags: {}
        when:
          pipelineStatus: Success
          condition: <+codebase.sourceBranch>=~ ".*-patch.*" || <+pipeline.variables.devonly> == "false"
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: MarkAsSuccess
    - stage:
        name: Deploy to Prod
        identifier: Deploy_to_Prod
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: Boutique_Frontend
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: boutiquefrontend
          environment:
            environmentRef: prod
            deployToAll: false
            infrastructureDefinitions:
              - identifier: boutique
          execution:
            steps:
              - step:
                  type: Policy
                  name: Risk Profile OPA - New Criticals
                  identifier: Critical_DAST_CVEs_Check
                  spec:
                    policySets:
                      - No_New_Critical_Vulnerabilities
                    type: Custom
                    policySpec:
                      payload: |-
                        {"SNYK_OSS_NEWCRITICAL": <+pipeline.stages.Build_Test_Push.spec.execution.steps.SCA.steps.SnykSCA.output.outputVariables.CRITICAL>,
                        "OWASP_OSS_NEWCRITICAL": <+pipeline.stages.Build_Test_Push.spec.execution.steps.SCA.steps.OWASP.output.outputVariables.CRITICAL>,
                        "SNYK_SAST_NEWCRITICAL": <+pipeline.stages.Build_Test_Push.spec.execution.steps.SAST.steps.Snyk.output.outputVariables.CRITICAL>,
                        "SQ_SAST_NEWCRITICAL": <+pipeline.stages.Build_Test_Push.spec.execution.steps.SAST.steps.SonarQube_SAST.output.outputVariables.CRITICAL>,
                        "XRAY_IMAGE_NEWCRITICAL": <+pipeline.stages.Build_Test_Push.spec.execution.steps.Image_Scan.steps.JFrog_Xray.output.outputVariables.CRITICAL>,
                        "AQUA_IMAGE_NEWCRITICAL": <+pipeline.stages.Build_Test_Push.spec.execution.steps.Image_Scan.steps.Aqua_Trivy.output.outputVariables.CRITICAL>}
                  timeout: 10m
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: Ignore
              - step:
                  type: JiraUpdate
                  name: "Update Jira "
                  identifier: Update_JIRA
                  spec:
                    connectorRef: account.Harness_JIRA
                    issueKey: <+pipeline.stages.Deploy_to_Dev.spec.execution.steps.Open_Jira_Ticket.issue.key>
                    fields:
                      - name: Comment
                        value: "\"Deploy to Prod\" started"
                  timeout: 1d
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: Ignore
              - stepGroup:
                  name: Canary Deployment
                  identifier: canaryDepoyment
                  steps:
                    - step:
                        name: Canary Deployment
                        identifier: canaryDeployment
                        type: K8sCanaryDeploy
                        timeout: 10m
                        spec:
                          instanceSelection:
                            spec:
                              percentage: 5
                            type: Percentage
                          skipDryRun: false
                    - parallel:
                        - step:
                            type: Http
                            name: Postman HTTP Check
                            identifier: Postman_HTTP_Check
                            spec:
                              url: https://harness.io
                              method: GET
                              headers: []
                              outputVariables: []
                            timeout: 10s
                        - step:
                            type: Verify
                            name: Continuous Verification
                            identifier: cv_demo
                            spec:
                              type: Rolling
                              monitoredService:
                                type: Default
                                spec: {}
                              spec:
                                sensitivity: HIGH
                                duration: 5m
                                deploymentTag: <+serviceConfig.artifacts.primary.tag>
                              isMultiServicesOrEnvs: false
                            timeout: 2h
                            failureStrategies:
                              - onFailure:
                                  errors:
                                    - Verification
                                  action:
                                    type: ManualIntervention
                                    spec:
                                      timeout: 1h
                                      onTimeout:
                                        action:
                                          type: StageRollback
                              - onFailure:
                                  errors:
                                    - Unknown
                                  action:
                                    type: ManualIntervention
                                    spec:
                                      timeout: 2h
                                      onTimeout:
                                        action:
                                          type: Ignore
                        - step:
                            type: Chaos
                            name: Chaos - CPU Hog
                            identifier: Chaos_Pod_Delete
                            spec:
                              experimentRef: 0f7f48ca-25a7-4afd-8556-129078da34dc
                              expectedResilienceScore: 50
                            failureStrategies:
                              - onFailure:
                                  errors:
                                    - AllErrors
                                  action:
                                    type: Ignore
                            when:
                              stageStatus: Success
                        - step:
                            type: ShellScript
                            name: Access to Deployment
                            identifier: Access_to_Deployment
                            spec:
                              shell: Bash
                              onDelegate: true
                              source:
                                type: Inline
                                spec:
                                  script: |
                                    frontend=$(kubectl get service frontend-external -n boutique-prod | awk '{print $4}' | xargs | awk '{print $2}')
                                    grafana=$(kubectl get service grafana -n boutique | awk '{print $4}' | xargs | awk '{print $2}')
                                    prom=$(kubectl get service prometheus-k8s -n boutique | awk '{print $4}' | xargs | awk '{print $2}')
                                    frontend="http://"$frontend
                                    grafana="http://"$grafana":3000"
                                    prom="http://"$prom":9090"


                                    echo "Boutique URL:" $frontend
                                    echo "Grafana URL: "$grafana
                                    echo "Prometheus URL: "$prom
                              environmentVariables: []
                              outputVariables:
                                - name: boutique_prod_url
                                  type: String
                                  value: frontend
                                - name: prometheus_url
                                  type: String
                                  value: prom
                                - name: grafana_url
                                  type: String
                                  value: grafana
                            timeout: 10m
                    - step:
                        name: Canary Delete
                        identifier: canaryDelete
                        type: K8sCanaryDelete
                        timeout: 10m
                        spec:
                          skipDryRun: false
                        when:
                          stageStatus: All
                        failureStrategies: []
                  rollbackSteps:
                    - step:
                        name: Canary Delete
                        identifier: rollbackCanaryDelete
                        type: K8sCanaryDelete
                        timeout: 10m
                        spec: {}
              - stepGroup:
                  name: Primary Deployment
                  identifier: primaryDepoyment
                  steps:
                    - step:
                        name: Rolling Deployment
                        identifier: rollingDeployment
                        type: K8sRollingDeploy
                        timeout: 10m
                        spec:
                          skipDryRun: false
                        failureStrategies:
                          - onFailure:
                              errors:
                                - AllErrors
                              action:
                                type: MarkAsSuccess
                  rollbackSteps:
                    - step:
                        name: Rolling Rollback
                        identifier: rollingRollback
                        type: K8sRollingRollback
                        timeout: 10m
                        spec: {}
            rollbackSteps:
              - step:
                  name: Canary Delete
                  identifier: rollbackCanaryDelete
                  type: K8sCanaryDelete
                  timeout: 10m
                  spec: {}
              - step:
                  name: Rolling Rollback
                  identifier: rollingRollback
                  type: K8sRollingRollback
                  timeout: 10m
                  spec: {}
              - step:
                  type: JiraUpdate
                  name: Update Jira
                  identifier: Update_Jira_Close
                  spec:
                    connectorRef: account.Harness_JIRA
                    issueKey: <+pipeline.stages.Deploy_to_Dev.spec.execution.steps.Open_Jira_Ticket.issue.key>
                    transitionTo:
                      transitionName: ""
                      status: Rejected
                    fields:
                      - name: Comment
                        value: Deploy to Production Failed, and was Rolled Back
                  timeout: 1d
              - stepGroup:
                  name: Terraform CleanUp
                  identifier: TF_CleanUp
                  steps:
                    - parallel:
                        - step:
                            type: TerraformDestroy
                            name: TF Destroy AWS
                            identifier: Tf_Destroy_S3
                            spec:
                              provisionerIdentifier: e2eaws
                              configuration:
                                type: InheritFromApply
                            timeout: 10m
                        - step:
                            type: TerraformDestroy
                            name: TF Destroy Az
                            identifier: TF_Destroy_AzBlob
                            spec:
                              provisionerIdentifier: e2eaz
                              configuration:
                                type: InheritFromApply
                            timeout: 10m
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: MarkAsSuccess
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        when:
          pipelineStatus: Success
          condition: <+codebase.sourceBranch>=~ ".*-patch.*" || <+pipeline.variables.devonly> == "false"
  variables:
    - name: devonly
      type: String
      default: ""
      value: <+input>.allowedValues(false,true)
  delegateSelectors:
    - platform-delegate-with-tf
  orgIdentifier: default
